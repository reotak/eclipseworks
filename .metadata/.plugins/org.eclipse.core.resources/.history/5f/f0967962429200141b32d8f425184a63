package ex16_09;

import static ex16_09.Util.*;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.List;

class DeclarationSearcher {
	public static List<? extends List<Integer>> [][]list;

	public static List<? extends List<Integer>>[][] toList(List<? extends List<Integer>>[][]... list)
			throws IllegalArgumentException {

		return list[0];
	}

	public static String search(String className) {
		String result = "";

		Class<?> c;
		try {
			c = Class.forName(className);
		} catch (ClassNotFoundException e) {
			System.err.println("Class Not Found");
			return "";
		}

		System.out.println("class:" + c.getSimpleName());
		System.out.println("  mod:" + modifierToString(c.getModifiers(), true));

		for (Field f : c.getDeclaredFields()) {
			System.out.println(" field:" + f.toGenericString());
			System.out.println("  name:" + f.getName());
			System.out.println("  Type:" + typeToString(f.getGenericType()));
			System.out.println("   mod:" + modifierToString(f.getModifiers()));
		}

		for (Method m : c.getDeclaredMethods()) {
			System.out.println(" method:" + m.toGenericString());
			System.out.println("   name:" + m.getName());
			System.out.println("   Type:" + typeToString(m.getGenericReturnType()));
			System.out.println("    mod:" + modifierToString(m.getModifiers()));
			for (Type t : m.getGenericParameterTypes()) {
				System.out.println("   arg:" + typeToString(t));
			}
			for (Type t : m.getGenericExceptionTypes()) {
				System.out.println("  throw:" + typeToString(t));
			}
		}

		return result;
	}

	public static void main(String []args) {
		search("java.awt.ActiveEvent");
		search("java.lang.Integer");
		search("java.util.ArrayList");
		search("ex16_09.DeclarationSearcher");
	}
}
