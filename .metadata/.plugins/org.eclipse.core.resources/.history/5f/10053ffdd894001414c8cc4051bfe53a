package intepret;

import java.lang.reflect.Field;

public class InstanceField {
	private final Field f;
	private final Object target;
	private final String name;
	private final String type;
	private String value;

	public InstanceField(Field f, Object target) {
		f.setAccessible(true);

		this.f = f;
		this.target = target;

		name = f.getName();
		type = Util.typeToString(f.getGenericType());

		value = "";
		try {
			Object tmp = f.get(target);
			if (tmp != null) {
				value = tmp.toString();
			} else {
				value = "NULL";
			}
		} catch (IllegalArgumentException e) {
			assert false : "オブジェクトとフィールドの関係が間違っています\n" + e.toString();
		} catch (IllegalAccessException e) {
			assert false : "フィールドへのアクセスが拒否されました\n" + e.toString();
		}
	}

	public final String getName() {
		return name;
	}

	public final String getValue() {
		return value;
	}

	public final String getType() {
		return type;
	}

	public void setValue(Object value)
			throws IllegalArgumentException, IllegalAccessException,
			SecurityException, NoSuchFieldException {
		f.setAccessible(true);
		f.set(target, value);
		this.value = value.toString();
	}

	public void setValue(IInstance ins, Object value)
			throws IllegalArgumentException, IllegalAccessException,
			SecurityException, NoSuchFieldException {
		setValue(((Instance) ins).getObject(), value);
	}

	public String toString() {
		return name + " -> " + value;
	}
}
