package gui;

import intepret.IConstructor;
import intepret.IInstance;
import intepret.InstanceCreater;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

class InstanceViewer extends JFrame {
	private final JTable instanceTable;
	private final DefaultTableModel tableModel;
	private final Dictionary<String, IInstance> realTable = new Hashtable<String, IInstance>();

	public InstanceViewer() {
		setTitle("インスタンスビューアー");
		this.setBounds(10, 10, 500, 800);

		// InstanceTableを表示
		tableModel = createInstanceTabelModel();
		instanceTable = new JTable(tableModel);
		JScrollPane sp = new JScrollPane(instanceTable);
		sp.setPreferredSize(new Dimension(450, 700));
		instanceTable.doLayout();
		JPanel tablePanel = new JPanel();
		tablePanel.add(sp);

		getContentPane().add(tablePanel, BorderLayout.CENTER);

		JPanel buttonPanel = new JPanel();

		// このインスタンスを見るボタン
	    JButton viewButton= new JButton("このインスタンスを見る");
	    viewButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent e) {
				openFieldViewer();
	    	}
	    });
	    buttonPanel.add(viewButton);

	    // 新しいインスタンスの生成ボタン
		JButton createInstanceButton = new JButton("新しいインスタンスを生成");
		createInstanceButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				openCreateInstanceDialog();
			}
		});
		buttonPanel.add(createInstanceButton);

		getContentPane().add(buttonPanel, BorderLayout.SOUTH);
	}

	private DefaultTableModel createInstanceTabelModel() {
		String[] columnNames = new String[] { "ID", "型" };

		// モデルを生成する
		DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		for (Enumeration<String> e = realTable.keys(); e.hasMoreElements();) {
			String key = e.nextElement();
			IInstance value = realTable.get(key);
			model.addRow(new String[]{ key, value.getCls() });
		}
		return model;
	}

	private void openFieldViewer() {
		int num = instanceTable.getSelectedRow();
		String id = (String)instanceTable.getModel().getValueAt(num, 0);

		IInstance ins = realTable.get(id);

		FieldViewer viewer = new FieldViewer(ins, this);
		viewer.setVisible(true);
	}

	private void openCreateInstanceDialog() {
		ConstructorWindow dialog = new ConstructorWindow(this);
		dialog.setVisible(true);
	}


	public IInstance getInstance(String key) {
		return realTable.get(key);
	}

	public void addInstance(IInstance ins) {
		realTable.put(ins.getInstanceId(), ins);
		tableModel.addRow(new String[] { ins.getInstanceId(), ins.getCls() });
	}

	public void addInstance(IConstructor con, Object[] args) {
		try {
			addInstance(InstanceCreater.createInstance("new", con, args));
		} catch (InstantiationException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {

			JOptionPane.showMessageDialog(e);
		}
	}

	public JTable getInstanceTable() {
		// return clone
		return new JTable(createInstanceTabelModel());
	}

	public static void main(String[] args) {
		InstanceViewer viewer = new InstanceViewer();

		viewer.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		viewer.setVisible(true);
	}



}
