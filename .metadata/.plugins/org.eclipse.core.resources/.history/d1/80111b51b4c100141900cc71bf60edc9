package ex22_15;

import java.util.StringTokenizer;

public class Calculator {

	public static double calc(String expr) {
		StringTokenizer st = new StringTokenizer(expr, " ");

		double total = 0.0;
		while (st.hasMoreTokens()) {
			try {
				total += new Double(st.nextToken());
			} catch (NumberFormatException e) {
				throw new IllegalArgumentException("空白で区切られた浮動小数点ではありません" + e.toString());
			}
		}

		return total;
	}

	private static void calcToken(Stack<Double> stack, String token) {
		if (token == "+") {
			stack.push(stack.pop() + stack.pop());
			return;
		} else 	if (token == "-") {
			stack.push(stack.pop() - stack.pop());
			return;
		} else 	if (token == "*") {
			stack.push(stack.pop() * stack.pop());
			return;
		} else 	if (token == "/") {
			stack.push(stack.pop() / stack.pop());
			return;
		} else if (token == "sin") {
			stack.push(Math.sin(stack.pop()));
			return;
		} else if (token == "cos") {
			stack.push(Math.cos(stack.pop()));
			return;
		} else if (token == "tan") {
			stack.push(Math.tan(stack.pop()));
			return;
		} else if (token == "asin") {
			stack.push(Math.asin(stack.pop()));
			return;
		} else if (token == "acos") {
			stack.push(Math.acos(stack.pop()));
			return;
		} else if (token == "atan") {
			stack.push(Math.atan(stack.pop()));
			return;
		} else if (token == "atan2") {
			stack.push(Math.atan2(stack.pop(), stack.pop()));
			return;
		} else if (token == "toRadians") {
			stack.push(Math.toRadians(stack.pop()));
			return;
		} else if (token == "toDegrees") {
			stack.push(Math.toDegrees(stack.pop()));
			return;
		} else if (token == "exp") {
			stack.push(Math.exp(stack.pop()));
			return;
		} else if (token == "sinh") {
			stack.push(Math.sinh(stack.pop()));
			return;
		} else if (token == "cosh") {
			stack.push(Math.cosh(stack.pop()));
			return;
		} else if (token == "tanh") {
			stack.push(Math.tanh(stack.pop()));
			return;
		} else if (token == "pow") {
			stack.push(Math.pow(stack.pop(), stack.pop()));
			return;
		} else if (token == "log") {
			stack.push(Math.log(stack.pop()));
			return;
		} else if (token == "log10") {
			stack.push(Math.log10(stack.pop()));
			return;
		} else if (token == "sqrt") {
			stack.push(Math.sqrt(stack.pop()));
			return;
		} else if (token == "cbrt") {
			stack.push(Math.cbrt(stack.pop()));
			return;
		} else if (token == "signum") {
			stack.push(Math.signum(stack.pop()));
			return;
		} else if (token == "ceil") {
			stack.push(Math.ceil(stack.pop()));
			return;
		} else if (token == "floor") {
			stack.push(Math.floor(stack.pop()));
			return;
		} else if (token == "rint") {
			stack.push(Math.rint(stack.pop()));
			return;
		} else if (token == "round") {
			stack.push((double)Math.round(stack.pop()));
			return;
		} else if (token == "abs") {
			stack.push(Math.abs(stack.pop()));
			return;
		} else if (token == "max") {
			stack.push(Math.max(stack.pop(), stack.pop()));
			return;
		} else if (token == "min") {
			stack.push(Math.min(stack.pop(), stack.pop()));
			return;
		} else if (token == "hypot") {
			stack.push(Math.hypot(stack.pop(), stack.pop()));
			return;
		} else {
			stack.push(new Double(token));
			return;
		}
	}
}
