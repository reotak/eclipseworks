package intepret;

import java.lang.reflect.InvocationTargetException;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;

class InstanceTable {
	private int lastId = 0;
	private Dictionary<String, Instance> table = new Hashtable<String, Instance>();

	public void addNewInstance(Constructor con, Object[] objects)
			throws InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException {
		String id = nextId();
		table.put(id, new Instance(id, con, objects));
		addId();
	}

	public Dictionary<String, Instance> getTable() {
		Dictionary<String, Instance> copy = new Hashtable<String, Instance>();

		for (Enumeration<String> e = table.keys(); e.hasMoreElements();) {
			String key = e.nextElement();
			copy.put(key, table.get(key));
		}

		return copy;
	}

	private String nextId() {
		if (lastId >= 999) {
			throw new RuntimeException("これ以上オブジェクトを生成できません。");
		}
		return String.format("#%04d", lastId + 1);
	}

	private void addId() {
		if (lastId >= 999) {
			throw new RuntimeException("これ以上オブジェクトを生成できません。");
		}
		lastId++;
	}

	public String toString() {
		String result = "";
		for (Enumeration<String> e = table.keys(); e.hasMoreElements();) {
			String key = e.nextElement();
			result += key + " : " + table.get(key).toString() + "\n";
		}
		return result;
	}

	public static void main(String[] args) {
		InstanceTable t = new InstanceTable();
		try {
			List<Constructor> cons = InstanceCreater
					.getConstructorList("java.lang.Integer");
			t.addNewInstance(cons.get(0), new Object[] { new Integer(100) });
			t.addNewInstance(cons.get(0), new Object[] { new Integer(101) });
			System.out.println(t.toString());
		} catch (ClassNotFoundException | InstantiationException
				| IllegalAccessException | IllegalArgumentException
				| InvocationTargetException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}
	}
}
