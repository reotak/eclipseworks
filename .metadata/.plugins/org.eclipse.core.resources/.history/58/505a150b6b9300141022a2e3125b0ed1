package intepret;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;

public class Instance {
	final String instanceId;
	final Class<?> cls;
	final Object obj;

	public Instance(Instance ins) {
		instanceId = ins.instanceId;
		cls = ins.cls;
		obj = ins.obj;
	}
	public Instance(String instanceId, Class<?> cls) throws ClassNotFoundException,
			InstantiationException, IllegalAccessException {
		this.instanceId = instanceId;
		this.cls = cls;
		this.obj = cls.newInstance();
	}

	public Instance(String instanceId, intepret.Constructor con, List<Object> args)
			throws InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException {
		this(instanceId, con.getCls(), con.getReflectConstructor(), args);
	}

	public Instance(String instanceId, Class<?> cls, Constructor<?> con, List<Object> args)
			throws InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException {
		this.instanceId = instanceId;
		this.cls = cls;

		if (args == null || args.size() == 0) {
			this.obj = con.newInstance();
		} else {
			this.obj = con
					.newInstance(args.toArray(new Object[args.size()]));
		}
	}

	public Instance(String instanceId, Class<?> cls, List<Class<?>> argClss, List<Object> args)
			throws NoSuchMethodException, SecurityException,
			InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException {
		this.instanceId = instanceId;
		this.cls = cls;

		// get constructor
		Constructor<?> con;
		if (argClss == null || argClss.size() == 0) {
			con = cls.getDeclaredConstructor();
		} else {
			con = cls.getDeclaredConstructor(argClss
					.toArray(new Class<?>[argClss.size()]));
		}

		// get object
		if (args == null || args.size() == 0) {
			this.obj = con.newInstance();
		} else {
			this.obj = con
					.newInstance(args.toArray(new Object[args.size()]));
		}
	}

	public List<InstanceField> getFields() {
		List<InstanceField> list = new ArrayList<InstanceField>();

		for (Field f : cls.getDeclaredFields()) {
			String name = f.getName();
			f.setAccessible(true);

			String value = "";
			try {
				Object tmp = f.get(obj);
				if (tmp != null) {
					value = tmp.toString();
				} else {
					value = "NULL";
				}
			} catch (IllegalArgumentException e) {
				assert false : "オブジェクトとフィールドの関係が間違っています\n" + e.toString();
			} catch (IllegalAccessException e) {
				assert false : "フィールドへのアクセスが拒否されました\n" + e.toString();
			}

			list.add(new InstanceField(name, value));
		}

		return list;
	}

	public String getInstanceId() {
		return instanceId;
	}
}
