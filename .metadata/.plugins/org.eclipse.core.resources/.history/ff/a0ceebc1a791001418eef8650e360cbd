package ex14_09;

import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

class ThreadGroupDisplay {

	public static Thread runDisplay(final ThreadGroup g) {
		return new Thread(new Runnable() {
			public void run() {
				for (;;) {
					Document doc = createDoc();

					// create and set root elem
					Element elem = doc.createElement("ThreadGroup");
					elem.setAttribute("name", g.getName());
					doc.appendChild(elem);

					ThreadGroup[] groups = new ThreadGroup[100];
					Thread[] threads = new Thread[100];

					int countT = g.enumerate(threads, false);
					for (int i = 0; i < countT; i++) {
						Element e = doc.createElement("Thread");
						e.setAttribute("name", threads[i].getName());
						elem.appendChild(e);
					}
					int countG = g.enumerate(groups, false);
					for (int i = 0; i < countG; i++) {
						Element e = doc.createElement("ThreadGroup");
						e.setAttribute("name", groups[i].getName());
						elem.appendChild(e);
					}

					System.out.println(doc.getFirstChild().getFirstChild()
							.toString());

					try {
						System.out.println(convertToString(doc));
					} catch (TransformerException e1) {
						e1.printStackTrace();
					}

					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}

			private Document createDoc() {
				DocumentBuilder documentBuilder = null;
				try {
					documentBuilder = DocumentBuilderFactory.newInstance()
							.newDocumentBuilder();
				} catch (ParserConfigurationException e) {
					e.printStackTrace();
				}
				return documentBuilder.newDocument();
			}

		});

	}

	public static String convertToString(Node node) throws TransformerException {

		DOMSource source = new DOMSource(node);
		StringWriter swriter = new StringWriter();
		StreamResult result = new StreamResult(swriter);
		transform(source, result);
		return swriter.toString();
	}

	private static void transform(Source source, Result result)
			throws TransformerException {

		TransformerFactory tff = TransformerFactory.newInstance();
		Transformer tf = tff.newTransformer();
		tf.transform(source, result);
	}

	public static void main(String[] args) {
		runDisplay(Thread.currentThread().getThreadGroup()).start();

	}
}
