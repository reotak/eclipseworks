package intepret;


public class InstanceTable {
	/*
	private int lastId = 0;
	private Dictionary<String, IInstance> table = new Hashtable<String, IInstance>();

	public void addNewInstance(IConstructor con, Object[] objects)
			throws InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException {
		String id = nextId();
		table.put(id, new Instance(id, con, objects));
		addId();
	}

	public Dictionary<String, IInstance> getTable() {
		Dictionary<String, IInstance> copy = new Hashtable<String, IInstance>();

		for (Enumeration<String> e = table.keys(); e.hasMoreElements();) {
			String key = e.nextElement();
			copy.put(key, table.get(key));
		}

		return copy;
	}


	public String toString() {
		String result = "";
		for (Enumeration<String> e = table.keys(); e.hasMoreElements();) {
			String key = e.nextElement();
			result += key + " : " + table.get(key).toString() + "\n";
		}
		return result;
	}

	public static void main(String[] args) {
		InstanceTable t = new InstanceTable();
		try {
			List<IConstructor> cons = InstanceCreater
					.getConstructorList("java.lang.Integer");
			t.addNewInstance(cons.get(0), new Object[] { new Integer(100) });
			t.addNewInstance(cons.get(0), new Object[] { new Integer(101) });
			System.out.println(t.toString());
		} catch (ClassNotFoundException | InstantiationException
				| IllegalAccessException | IllegalArgumentException
				| InvocationTargetException e) {
			e.printStackTrace();
		}
	}
	*/
}
